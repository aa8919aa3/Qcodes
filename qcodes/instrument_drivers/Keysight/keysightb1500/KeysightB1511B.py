from typing import Optional, Union, TYPE_CHECKING, List

from .KeysightB1517A import B1517A
from . import constants
from .constants import IMeasRange, VOutputRange, IOutputRange

if TYPE_CHECKING:
    from .KeysightB1500_base import KeysightB1500


class B1511B(B1517A):
    """
    Driver for Keysight B1511B Source/Monitor Unit module for B1500
    Semiconductor Parameter Analyzer.

    Args:
        parent: mainframe B1500 instance that this module belongs to
        name: Name of the instrument instance to create. If `None`
            (Default), then the name is autogenerated from the instrument
            class.
        slot_nr: Slot number of this module (not channel number)
        asu_present: Flag to acknowledge ASU presence
    """

    def __init__(self, parent: 'KeysightB1500', name: Optional[str],
                 slot_nr: int, asu_present: bool = False, **kwargs):
        super().__init__(parent, name, slot_nr, **kwargs)
        self._valid_i_measure_ranges: List[IMeasRange] = [IMeasRange.AUTO,
                                                          IMeasRange.MIN_1nA,
                                                          IMeasRange.MIN_10nA,
                                                          IMeasRange.MIN_100nA,
                                                          IMeasRange.MIN_1uA,
                                                          IMeasRange.MIN_10uA,
                                                          IMeasRange.MIN_100uA,
                                                          IMeasRange.MIN_1mA,
                                                          IMeasRange.MIN_10mA,
                                                          IMeasRange.MIN_100mA,
                                                          IMeasRange.FIX_1nA,
                                                          IMeasRange.FIX_10nA,
                                                          IMeasRange.FIX_100nA,
                                                          IMeasRange.FIX_1uA,
                                                          IMeasRange.FIX_10uA,
                                                          IMeasRange.FIX_100uA,
                                                          IMeasRange.FIX_1mA,
                                                          IMeasRange.FIX_10mA,
                                                          IMeasRange.FIX_100mA]
        self._valid_v_output_ranges: List[VOutputRange] = [
            VOutputRange.AUTO, VOutputRange.MIN_0V5, VOutputRange.MIN_2V,
            VOutputRange.MIN_5V, VOutputRange.MIN_20V, VOutputRange.MIN_40V,
            VOutputRange.MIN_100V]
        self._valid_i_output_ranges: List[IOutputRange] = [
            IOutputRange.AUTO, IOutputRange.MIN_1nA, IOutputRange.MIN_10nA,
            IOutputRange.MIN_100nA, IOutputRange.MIN_1uA,
            IOutputRange.MIN_10uA, IOutputRange.MIN_100uA,
            IOutputRange.MIN_1mA, IOutputRange.MIN_10mA, IOutputRange.MIN_100mA]

        if asu_present:
            self._valid_i_measure_ranges = self._valid_i_measure_ranges + \
                                           [IMeasRange.MIN_1pA,
                                            IMeasRange.MIN_10pA,
                                            IMeasRange.MIN_100pA,
                                            IMeasRange.FIX_1pA,
                                            IMeasRange.FIX_10pA,
                                            IMeasRange.FIX_100pA]
            self._valid_i_output_ranges = self._valid_i_output_ranges + \
                                          [IOutputRange.MIN_1pA,
                                           IOutputRange.MIN_10pA,
                                           IOutputRange.MIN_100pA]

    def source_config(
            self,
            output_range: constants.OutputRange,
            compliance: Optional[Union[float, int]] = None,
            compl_polarity: Optional[constants.CompliancePolarityMode] = None,
            min_compliance_range: Optional[constants.MeasureRange] = None,
    ) -> None:
        """Configure sourcing voltage/current

        Args:
            output_range: voltage/current output range
            compliance: voltage/current compliance value
            compl_polarity: compliance polarity mode
            min_compliance_range: minimum voltage/current compliance output
                range
        """
        if min_compliance_range is not None:
            if isinstance(min_compliance_range, type(output_range)):
                raise TypeError(
                    "When forcing voltage, min_compliance_range must be an "
                    "current output range (and vice versa)."
                )

        if isinstance(output_range, VOutputRange):
            if output_range not in self._valid_v_output_ranges:
                raise RuntimeError(
                    "Invalid Source Voltage Output Range"
                )

        if isinstance(output_range, IOutputRange):
            if output_range not in self._valid_i_output_ranges:
                raise RuntimeError(
                    "Invalid Source Current Output Range"
                )

        self._source_config = {
            "output_range": output_range,
            "compliance": compliance,
            "compl_polarity": compl_polarity,
            "min_compliance_range": min_compliance_range,
        }

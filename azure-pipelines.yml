name: "QCoDeS CI"

trigger:
  branches:
    include:
      - master

jobs:
  - job: "run_the_tests"
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-16.04'
        windows:
          imageName: 'vs2017-win2016'
    pool:
      vmImage: $(imageName)

    steps:
      - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
        displayName: "Add conda to PATH on Windows"
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
      - bash: echo "##vso[task.prependpath]/usr/share/miniconda/bin"
        displayName: "Add conda to PATH on Linux"
        condition: eq( variables['Agent.OS'], 'Linux' )
      - script: |
          conda update -n base conda -y
          conda init --all
        displayName: "Conda setup on Windows"
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
      - bash: |
          sudo conda update -n base conda -y
          sudo conda init bash
        displayName: "Conda setup on Linux"
        condition: eq( variables['Agent.OS'], 'Linux' )
      - bash: |
          conda --version
          conda env create --file environment.yml
          source activate qcodes
          pip install -r test_requirements.txt
          pip install -r docs_requirements.txt
          pip install -e .
        displayName: "Installation"
      - bash: |
          source activate qcodes
          mypy qcodes
        displayName: "mypy"
      - bash: |
          source activate qcodes
          cd ..
          git clone https://github.com/QCoDeS/qcodes_generate_test_db.git
          cd qcodes_generate_test_db
          python generate_version_0.py
          python generate_version_1.py
          python generate_version_2.py
          python generate_version_3.py
          python generate_version_4a.py
          python generate_version_4.py
        displayName: "Generate db fixtures"
      - script: |
          CALL C:\Miniconda\condabin\conda_hook.bat
          CALL conda activate qcodes
          cd qcodes
          pytest --junitxml=test-results.xml --cov=qcodes --cov-report=xml --cov-report=html --cov-config=.coveragerc
        displayName: "Pytest on Windows"
        condition: and(succeededOrFailed(), eq( variables['Agent.OS'], 'Windows_NT' ))
      - bash: |
          source activate qcodes
          cd qcodes
          xvfb-run --server-args="-screen 0 1024x768x24" pytest --junitxml=test-results.xml --cov=qcodes --cov-report=xml --cov-report=html --cov-config=.coveragerc
        displayName: "Pytest on Linux"
        condition: and(succeededOrFailed(), eq( variables['Agent.OS'], 'Linux' ))
      - task: PublishTestResults@1
        displayName: "Publish test results"
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: 'qcodes/test-*.xml'
          testRunTitle: 'Publish test results'
      - task: PublishCodeCoverageResults@1
        displayName: "Publish code coverage results"
        condition: succeededOrFailed()
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/qcodes/coverage.xml'
      - script: |
          CALL C:\Miniconda\condabin\conda_hook.bat
          CALL conda activate qcodes
          cd docs
          REM Turn warnings into errors
          set SPHINXOPTS=-W -v
          make.bat htmlapi
        condition: and(succeededOrFailed(), eq( variables['Agent.OS'], 'Windows_NT' ))
        displayName: "docsbuild on Windows"
      - script: |
          source activate qcodes
          cd docs
          export SPHINXOPTS=-W -v
          xvfb-run --server-args="-screen 0 1024x768x24" make htmlapi
        condition: and(succeededOrFailed(), eq( variables['Agent.OS'], 'Linux' ))
        displayName: "docsbuild on Linux"
      - task: PublishBuildArtifacts@1
        displayName: "Publish build docs to Azure DevOps"
        condition: succeededOrFailed()
        inputs:
          pathtoPublish: 'docs/_build/html'
          artifactName: 'qcodes_docs'
          publishLocation: 'Container'
